<script type="text/javascript">


Ext.override(Ext.plugins.ListPagingPlugin, {
    onListUpdate : function() {
        if (this.list.store && this.list.store.data.length < (this.list.store.currentPage * this.list.store.pageSize)) {
            if (!this.rendered) {
                return false;
            } else if (!this.autoPaging) {
                this.el.removeCls('x-loading');
                this.el.remove();
            } else {
                this.loading = false;
            }
            return false;
        }

        if (!this.rendered) {
            this.render();
        }

        this.el.appendTo(this.list.getTargetEl());
        if (!this.autoPaging) {
            this.el.removeCls('x-loading');
        }
        this.loading = false;
    }
});

var App = new Ext.Application({
	
	name : 'TaskConsole',	
	useLoadMask : false,	
	launch : function () {			

		TaskConsole.views.mainToolbar = new Ext.Toolbar({
			id: 'mainToolbar',
			title: 'Task Console',
			items: 	[
				{
					xtype: 'button',
					text: 'logout'
				}
			]
				
		});
		
		Ext.regModel('Task', {
			fields: [
						{name: 'DESCRIPTION', type: 'string'},
						{name: 'PROJECT', type: 'string'},
						{name: 'PRIORITY', type: 'string'},
						{name: 'CATEGORIES', type: 'string'}
					]
		});
			
		TaskConsole.taskQueueStore = new Ext.data.Store({
			model: 'Task',
			getGroupString : function(record) {
		        return record.get('PRIORITY');
		    },
		    pageSize: 5,
		    clearOnPageLoad: false,			
			proxy: {
				type: 'ajax',
				url: '<?= $this->baseUrl(); ?>/tasks/user-tasks/status/queue',
				extraParams: { start: 0, limit: 5, priorities: "1,2,3"  },
			    reader: {
			    	type: 'json',
			        root: 'data'
			    }
			},
		    autoLoad: true
		});

		TaskConsole.taskQueueList = new Ext.List({
		    fullscreen: false,		    
		    itemTpl : '<div style="font-weight: bold;">{PROJECT}</div>{DESCRIPTION}',
		    grouped : true,		    		    
		    store: TaskConsole.taskQueueStore,
		    /*		    
		    onItemDisclosure: function(record,btn,index){
			    Ext.Msg.Alert('test');
		    },
		    */		    
		    plugins: [
		  		{
                	ptype: 'listpaging',
                	autoPaging: false
            	}            	
            ]
		});

		TaskConsole.taskPendingStore = new Ext.data.Store({
			model: 'Task',
			getGroupString : function(record) {
		        return record.get('PRIORITY');
		    },
		    pageSize: 5,
		    clearOnPageLoad: false,			
			proxy: {
				type: 'ajax',
				url: '<?= $this->baseUrl(); ?>/tasks/user-tasks/status/pending',
				extraParams: { start: 0, limit: 5, priorities: "1,2,3"  },
			    reader: {
			    	type: 'json',
			        root: 'data'
			    }
			},
		    autoLoad: true
		});

		TaskConsole.taskPendingList = new Ext.List({
		    fullscreen: false,		    
		    itemTpl : '<div style="font-weight: bold;">{PROJECT}</div>{DESCRIPTION}',
		    grouped : true,		    		    
		    store: TaskConsole.taskPendingStore,
		    plugins: [
		  		{
                	ptype: 'listpaging',
                	autoPaging: false
            	}				
            ]
		});				

		Ext.regModel('Note', {
			fields: [
						{name: 'DESCRIPTION', type: 'string'},
						{name: 'TOPIC', type: 'string'}
					]
		});

		
		
		TaskConsole.views.taskTabs = new Ext.TabPanel({

			fullscreen: true,
			ui: 'light',
			items: [
				{
					title: "Queue",
					items: TaskConsole.taskQueueList
				},{
					title: "Pending",
					items: TaskConsole.taskPendingList
				}
			]
										
		});		
	
		TaskConsole.views.viewport = new Ext.TabPanel({
			fullscreen: true,			
			layout: 'card',
			cardAnimation: 'slide',
			/*
			tabBar: {
		        dock: 'bottom',
		        ui: 'light',
		        layout: {
		            pack: 'center'
		        }
		    },
		    */
			dockedItems: [ 
			  			TaskConsole.views.mainToolbar,
			  			TaskConsole.views.taskTabs 
			]
			/*
			,
			items: [
				
				
				{
			        title: 'Tasks',
			        badgeText: '2',
			        items: TaskConsole.views.taskTabs		        
			        iconCls: 'action'
			    },			    
			    {
			        title: 'Notes',
			        html: 'notes',
			        iconCls: 'compose'
			    }
			    
			]
			*/
		});
	
	}	
});


</script>