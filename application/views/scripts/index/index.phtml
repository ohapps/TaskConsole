<script type="text/javascript">

/*********************
* CATEGORIES
********************/
var Category = Ext.data.Record.create([
	{name: "ID", type: "string"},                               	
	{name: "DESCRIPTION", type: "string"}
]);

var category_store = new Ext.data.Store({ 
	url: "<?= $this->baseUrl(); ?>/projects/usercats",	 	
	sortInfo: {
		field: 'DESCRIPTION',
		direction: 'ASC'
	},
	reader: new Ext.data.JsonReader({ totalProperty: "results", root: "data", id: "ID" }, Category), 
	autoLoad: true 
});

function formatDeleteCatLink(value, metaData, record, rowIndex, colIndex, store){		
    return '<a href="javascript:deleteCategory();" title="delete" style=""><img src="<?= $this->baseUrl() ?>/html/images/delete.png" /></a>';	            
}

var category_cm = new Ext.grid.ColumnModel([
	{ id: "id", header: "", dataIndex: "ID", width: 25, menuDisabled: true, hideable: false, renderer: formatDeleteCatLink },  
	{ id: "DESCRIPTION", header: "Description", dataIndex: "DESCRIPTION", width: 200, editor: new Ext.form.TextField({ allowBlank: false }) }         
]);

category_cm.defaultSortable = true;
                                               
var category_grid = new Ext.ux.EasyEditorGridPanel({
                                           		
	store: category_store,
	cm: category_cm,    
	clicksToEdit:1,
	autoExpandColumn: "DESCRIPTION",
	frame:false,    
	stripeRows: true,
	selModel: new Ext.grid.RowSelectionModel( {singleSelect:true} ),
	loadMask: true,

	tbar: [
			{ 
				text: "New Category",
				icon: "<?= $this->baseUrl() ?>/html/images/add.png",
				handler : function(){
					category_grid.addNewRow({ rec : new Category({ ID: "", DESCRIPTION: "" }) });
				}
			},{
				text: "Save Changes",
				icon: "<?= $this->baseUrl() ?>/html/images/disk.png",
				handler : function(){
					category_grid.postGrid( { url: "<?= $this->baseUrl(); ?>/projects/savecat", updatePK : true });
				}              
			}
		]
});

category_window = new Ext.Window({
    
    title: "Categories",                                            	      
    closeAction: 'hide',
	modal: true,
	width: 400,
	height: 300,
	layout: "fit",
    items: category_grid
    
});

function deleteCategory(){

	Ext.MessageBox.confirm("Confirm", "Are you sure you want to delete this item?", function(btn){ 
		if ( btn == "yes"){
			category_grid.deleteSelectedRows( { url: "<?= $this->baseUrl(); ?>/projects/deletecat" } );
		}
	});
	
}

function editCategories(){
	category_window.show();	
	category_window.center();
}
   				
/*********************
* TASK FILTER OBJECT
********************/
var task_filter = new Object();
task_filter.category = '';
task_filter.project = '';
task_filter.priorities = '';
task_filter.keyword = '';

function filterTasks(filterBy,filterVal){		
	
	switch(filterBy){
		case "category":
			if( filterVal != '' ){
				if( task_filter.category != '' && task_filter.category != filterVal ){
					addRemoveFilterClass('category','remove',task_filter.category);					
				}				
				addRemoveFilterClass('category','add',filterVal);																				
			}
			if( task_filter.project != '' ){
				addRemoveFilterClass('project','remove',task_filter.project);
				task_filter.project = '';
			}			
			task_filter.category = filterVal;
			break;			
		case "project":
			if( filterVal != '' ){
				if( task_filter.project != '' && task_filter.project != filterVal ){
					addRemoveFilterClass('project','remove',task_filter.project);
				}
				addRemoveFilterClass('project','add',filterVal);				
			}
			if( task_filter.category != '' ){
				addRemoveFilterClass('category','remove',task_filter.category);
				task_filter.category = '';
			}
			task_filter.project = filterVal;
			break;
		case "reset":
			if( task_filter.project != '' ){
				addRemoveFilterClass('project','remove',task_filter.project);
				task_filter.project = '';
			}
			if( task_filter.category != '' ){
				addRemoveFilterClass('category','remove',task_filter.category);
				task_filter.category = '';
			}
		default:
			if( task_filter.project != '' ){
				addRemoveFilterClass('project','add',task_filter.project);				
			}
			if( task_filter.category != '' ){
				addRemoveFilterClass('category','add',task_filter.category);				
			}
			task_filter_tree.getSelectionModel().clearSelections();
	}

	var priorities = ''; 
	selNodes = task_filter_tree.getChecked();
    Ext.each(selNodes, function(node){
        if(priorities.length > 0){
            priorities += ',';
        }
        priorities += node.id;
    });
	task_filter.priorities = priorities;
    
	task_queue_store.load({ params: { start: 0, limit: 50 } });
   	task_pending_store.load({ params: { start: 0, limit: 50 } });
   	task_complete_store.load({ params: { start: 0, limit: 50 } });
   	task_upcoming_store.load({ params: { start: 0, limit: 50 } });

   	if( task_filter.keyword != '' ){
   		task_search_store.load({ params: { start: 0, limit: 50 } });
   	}
	
}

function addRemoveFilterClass(type,action,val){
	node = task_filter_tree.getNodeById( type + '_' + val);
	if( action == "add" ){
		node.getUI().addClass('filterApply');
	}else{
		node.getUI().removeClass('filterApply');
	}
}

/*********************
* TASK FILTER TREE
********************/
var task_filter_tree = new Ext.tree.TreePanel({
        
        title: "Filter Tasks",
        autoScroll:true,
        animate:true,        
        containerScroll: true,                                                 
        region: "west",
        split:true,
        width: 200,
        minSize: 200,
        maxSize: 300,
        layout:'fit',
        margins:'5 0 5 5',
        collapsible: true,
        
        loader: new Ext.tree.TreeLoader({
            dataUrl: '<?= $this->baseUrl(); ?>/projects/loadtree',
            preloadChildren: false            
        }),
        
        root: new Ext.tree.AsyncTreeNode({
            text: 'filters',
            id: 'root',
            cls: 'folder',
            expanded: false
        }),
        
        rootVisible: true,

        listeners: {
		    'checkchange': function(node, checked){
				filterTasks('','');
		    }			
		},

		tbar: [
	           	{
	           	  	text: "Reset Filters",
	           	  	icon: "<?= $this->baseUrl(); ?>/html/images/page_refresh.png",
	           	  	handler : function(){	             	  		           	  		
	           	  		filterTasks('reset','');  		
	           	  	}
	           	}
	           ]
        
});

	
/*********************
* TASK TAB
********************/
var Task = Ext.data.Record.create([
	{name: "ID", type: "string"},
	{name: "PROJECT", type: "string"},
	{name: "PROJECT_ID", type: "string"},
	{name: "DESCRIPTION", type: "string"},
	{name: "PRIORITY", type: "string"},
	{name: "DUE_DATE", type: "date", dateFormat: "Y-m-d H:i:s"},    
	{name: "COMPLETED", type: "date", dateFormat: "Y-m-d H:i:s"},
	{name: "DISPLAY_DATE", type: "date", dateFormat: "Y-m-d H:i:s"},	
	{name: "QUEUE_ORDER", type: "float"},
	{name: "CATEGORIES", type: "string"}
]);

function formatEditTaskLink(value, metaData, record, rowIndex, colIndex, store){	
	lnk = "javascript:loadTask('"+ value + "');";
    return '<a href="'+ lnk +'" title="edit" style=""><img src="<?= $this->baseUrl() ?>/html/images/application_edit.png" /></a>';	            
}

function formatLoadTaskProjectLink(value, metaData, record, rowIndex, colIndex, store){
	if( value != '' ){
		lnk = "javascript:loadProject('"+ record.get("PROJECT_ID") + "');";
    	return '<a href="'+ lnk +'" title="edit project" style="">'+ value +'</a>';
	}else{
		return '';
	}	            
}

var task_queue_sm = new Ext.grid.CheckboxSelectionModel();

var task_queue_cm = new Ext.grid.ColumnModel([	 	
	task_queue_sm,
	{ header: "", dataIndex: "ID", width: 25, menuDisabled: true, hideable: false, renderer: formatEditTaskLink },	
	{ header: "Priority", dataIndex: "PRIORITY", width: 50, sortable: false, hidden: true },	
	{ header: "Categories", dataIndex: "CATEGORIES", width: 125, sortable: false, groupable: false },
	{ header: "Project", dataIndex: "PROJECT", width: 200, sortable: false, groupable: false, renderer: formatLoadTaskProjectLink },
	{ id: "queue_description", header: "Description", dataIndex: "DESCRIPTION", width: 200, sortable: false, groupable: false },
	{ header: "Due Date", dataIndex: "DUE_DATE", width: 80, renderer: Ext.util.Format.dateRenderer("d-M-Y"), sortable: false, groupable: false }       	
]);
                           	
var task_queue_store = new Ext.data.GroupingStore({ 
	url: "<?= $this->baseUrl(); ?>/tasks/user-tasks/status/queue",
	baseParams: task_filter, 
	remoteSort: true,	
	sortInfo: {
		field: 'PRIORITY',
		direction: 'ASC'
	},
	groupField: 'PRIORITY',	
	reader: new Ext.data.JsonReader({ totalProperty: "results", root: "data", id: "ID" }, Task), 
	autoLoad: false 
});		

var task_queue_pagingbar = new Ext.PagingToolbar({
    pageSize: 50,
    store: task_queue_store,
    displayInfo: true,
    displayMsg: "Displaying tasks {0} - {1} of {2}",
    emptyMsg: "No tasks to display"
});


var task_queue_action_menu = new Ext.menu.Menu({
    items:     [
                	{
                    	text: "Apply Category",
                    	icon: "<?= $this->baseUrl() ?>/html/images/add.png",                    
                    	menu:	[
									<?php foreach( $this->cats as $cnt => $cat ){ ?>
										{
							           	  	text: "<?= $cat->DESCRIPTION ?>",						           	  
							           	  	handler : function(){						             	  							           	  		
							           	  		applyCategory(<?= $cat->ID ?>,task_queue_grid);
							           	  	}
							           	}
							           	<?php if( ( $cnt + 1 ) != count($this->cats) ){ ?>,<?php } ?>
						           	<?php } ?>								
                          		]
                   	},{
                    	text: "Remove Category",
                    	icon: "<?= $this->baseUrl() ?>/html/images/delete.png",                    
                    	menu:[
									<?php foreach( $this->cats as $cnt => $cat ){ ?>
										{
										  	text: "<?= $cat->DESCRIPTION ?>",						           	  
										  	handler : function(){						             	  							           	  		
										  		removeCategory(<?= $cat->ID ?>,task_queue_grid);
										  	}
										}
										<?php if( ( $cnt + 1 ) != count($this->cats) ){ ?>,<?php } ?>
									<?php } ?>									
                          	]
                   	}
					
            ]    
});

var task_queue_grid = new Ext.ux.EasyEditorGridPanel({
                           		
	title: 'Queue',		
	store: task_queue_store,
	cm: task_queue_cm,    	
	autoExpandColumn: "queue_description",	   
	stripeRows: true,
	selModel: task_queue_sm,
	loadMask: true,
	view: new Ext.grid.GroupingView({
        forceFit: false,        
        groupTextTpl: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? "Tasks" : "Task"]})'
    }),
	
	tbar: [
           	{
           	  	text: "Mark Completed",
           	  	icon: "<?= $this->baseUrl(); ?>/html/images/accept.png",
           	  	handler : function(){
             	  	
           	  		task_queue_grid.postSelectedIDs({ 
           	  			url: "<?= $this->baseUrl(); ?>/tasks/mark-complete", 
           	  			postParam : "data[]", 
           	  			maskSave: true,
           	  			callback: function(){ filterTasks('',''); }    						
           	  		});
         	  		
           	  	}
           	},
		   	'-',
		   	{
          		text: "Remove From Queue",
              	icon: "<?= $this->baseUrl(); ?>/html/images/script_delete.png",
              	handler : function(){

              		task_queue_grid.postSelectedIDs({ 
           	  			url: "<?= $this->baseUrl(); ?>/tasks/remove-from-queue", 
           	  			postParam : "data[]", 
           	  			maskSave: true,
           	  			callback: function(){ filterTasks('',''); }    						
           	  		});
               		
              	}
          	},
			'-',
          	{
           		text: "Delete",
               	icon: "<?= $this->baseUrl(); ?>/html/images/application_delete.png",
               	handler : function(){

               		Ext.MessageBox.confirm("Confirm", "Are you sure you want to delete these tasks?", function(btn){ 
                    	if ( btn == "yes"){
		               		task_queue_grid.postSelectedIDs({ 
		           	  			url: "<?= $this->baseUrl(); ?>/tasks/delete", 
		           	  			postParam : "data[]", 
		           	  			maskSave: true,
		           	  			callback: function(){ filterTasks('',''); }    						
		           	  		});
                    	}
               		});
                	
               	}
          	},          	
          	'-',
          	{
                text: "More Actions",
                icon: "<?= $this->baseUrl() ?>/html/images/cog.png",
                menu: task_queue_action_menu
            }          	                                      
       	],
	bbar: task_queue_pagingbar 	    

});

var task_pending_sm = new Ext.grid.CheckboxSelectionModel();

var task_pending_cm = new Ext.grid.ColumnModel([
	task_pending_sm,
	{ header: "", dataIndex: "ID", width: 25, menuDisabled: true, hideable: false, renderer: formatEditTaskLink },	
	{ header: "Priority", dataIndex: "PRIORITY", width: 50, sortable: false, hidden: true },		
	{ header: "Categories", dataIndex: "CATEGORIES", width: 125, sortable: false, groupable: false },
	{ header: "Project", dataIndex: "PROJECT", width: 200, sortable: false, groupable: false, renderer: formatLoadTaskProjectLink },
	{ id: "pending_description", header: "Description", dataIndex: "DESCRIPTION", width: 200, sortable: false, groupable: false },
	{ header: "Due Date", dataIndex: "DUE_DATE", width: 80, renderer: Ext.util.Format.dateRenderer("d-M-Y"), sortable: false, groupable: false }                                                 
]);
                                                                     	
var task_pending_store = new Ext.data.GroupingStore({ 
	url: "<?= $this->baseUrl(); ?>/tasks/user-tasks/status/pending",
	baseParams: task_filter, 
	remoteSort: true,
	sortInfo: {
		field: 'PRIORITY',
		direction: 'ASC'
	},
	groupField: 'PRIORITY',
	reader: new Ext.data.JsonReader({ totalProperty: "results", root: "data", id: "ID" }, Task), 
	autoLoad: false 
});		

var task_pending_pagingbar = new Ext.PagingToolbar({
	pageSize: 50,
	store: task_pending_store,
	displayInfo: true,
	displayMsg: "Displaying tasks {0} - {1} of {2}",
	emptyMsg: "No tasks to display"
});

var category_pending_combo = new Ext.form.ComboBox({	
	hideLabel: true, 	 
	width: 200,	 
	store: category_store, 
	valueField: "ID", 
	displayField: "DESCRIPTION", 
	typeAhead: true, 
	mode: "local", 
	triggerAction: "all", 
	emptyText: "select category to apply / remove", 
	selectOnFocus: true, 
	editable: false
});

var task_pending_grid = new Ext.ux.EasyEditorGridPanel({
                                                                     		
	title: 'Pending',		
	store: task_pending_store,
	cm: task_pending_cm,    	
	autoExpandColumn: "pending_description",	   
	stripeRows: true,
	selModel: task_pending_sm,
	loadMask: true,
	view: new Ext.grid.GroupingView({
        forceFit: false,        
        groupTextTpl: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? "Tasks" : "Task"]})'
    }),
	tbar: [
          	{
          	  	text: "Mark Completed",
          	  	icon: "<?= $this->baseUrl(); ?>/html/images/accept.png",
          	  	handler : function(){
            	  	
          	  		task_pending_grid.postSelectedIDs({ 
          	  			url: "<?= $this->baseUrl(); ?>/tasks/mark-complete", 
          	  			postParam : "data[]", 
          	  			maskSave: true,
          	  			callback: function(){ filterTasks('',''); }    						
          	  		});
        	  		
          	  	}
          	},
          	'-',
		  	{
          		text: "Add To Queue",
              	icon: "<?= $this->baseUrl(); ?>/html/images/script_add.png",
              	handler : function(){

              		task_pending_grid.postSelectedIDs({ 
          	  			url: "<?= $this->baseUrl(); ?>/tasks/add-to-queue", 
          	  			postParam : "data[]", 
          	  			maskSave: true,          	  			
          	  			callback: function(){ filterTasks('',''); }    						
          	  		});
               		
              	}
          	},
		   	'-',
		  	{
          		text: "Delete",
              	icon: "<?= $this->baseUrl(); ?>/html/images/application_delete.png",
              	handler : function(){

              		Ext.MessageBox.confirm("Confirm", "Are you sure you want to delete these tasks?", function(btn){ 
                    	if ( btn == "yes"){
		               		task_pending_grid.postSelectedIDs({ 
		           	  			url: "<?= $this->baseUrl(); ?>/tasks/delete", 
		           	  			postParam : "data[]", 
		           	  			maskSave: true,
		           	  			callback: function(){ filterTasks('',''); }    						
		           	  		});
                    	}
               		});
               		
              	}
          	},
          	'-',
			category_pending_combo,          	
          	{
           		text: "Apply",
               	icon: "<?= $this->baseUrl(); ?>/html/images/add.png",
               	handler : function(){

               		if( category_pending_combo.getValue() != '' ){
               			applyCategory(category_pending_combo.getValue(),task_pending_grid);
               			category_pending_combo.setValue('');
               		}else{
               			Ext.Msg.alert("Error", "Please select a category to apply.");
               		}
                	
               	}
          	},{
           		text: "Remove",
               	icon: "<?= $this->baseUrl(); ?>/html/images/delete.png",
               	handler : function(){

               		if( category_pending_combo.getValue() != '' ){
               			removeCategory(category_pending_combo.getValue(),task_pending_grid);
               			category_pending_combo.setValue('');
               		}else{
               			Ext.Msg.alert("Error", "Please select a category to remove.");
               		}
                	
               	}
          	}          
      	],
	bbar: task_pending_pagingbar 	    

});

var task_complete_sm = new Ext.grid.CheckboxSelectionModel();

var task_complete_cm = new Ext.grid.ColumnModel([
	task_complete_sm,
	{ header: "", dataIndex: "ID", width: 25, menuDisabled: true, hideable: false, renderer: formatEditTaskLink },	
	{ header: "Priority", dataIndex: "PRIORITY", width: 50 },
	{ header: "Completed", dataIndex: "COMPLETED", width: 80, renderer: Ext.util.Format.dateRenderer("d-M-Y") },
	{ header: "Categories", dataIndex: "CATEGORIES", width: 125, sortable: false },
	{ header: "Project", dataIndex: "PROJECT", width: 200, renderer: formatLoadTaskProjectLink },
	{ id: "complete_description", header: "Description", dataIndex: "DESCRIPTION", width: 200 }                                                 
]);
                                                                                                                 	
var task_complete_store = new Ext.data.Store({ 
	url: "<?= $this->baseUrl(); ?>/tasks/user-tasks/status/complete",
	baseParams: task_filter, 
	remoteSort: true,
	sortInfo: {
		field: 'COMPLETED',
		direction: 'DESC'
	}, 
	reader: new Ext.data.JsonReader({ totalProperty: "results", root: "data", id: "ID" }, Task), 
	autoLoad: false 
});		

var task_complete_pagingbar = new Ext.PagingToolbar({
	pageSize: 50,
	store: task_complete_store,
	displayInfo: true,
	displayMsg: "Displaying tasks {0} - {1} of {2}",
	emptyMsg: "No tasks to display"
});

var category_complete_combo = new Ext.form.ComboBox({ 
	hideLabel: true, 	 
	width: 200,	 
	store: category_store, 
	valueField: "ID", 
	displayField: "DESCRIPTION", 
	typeAhead: true, 
	mode: "local", 
	triggerAction: "all", 
	emptyText: "select category to apply / remove", 
	selectOnFocus: true, 
	editable: false
});

var task_complete_grid = new Ext.ux.EasyEditorGridPanel({
                                                                                                                 		
	title: 'Complete',		
	store: task_complete_store,
	cm: task_complete_cm,    	
	autoExpandColumn: "complete_description",	   
	stripeRows: true,
	selModel: task_complete_sm,
	loadMask: true,
	tbar: [
         	{
         	  	text: "Mark Incompleted",
         	  	icon: "<?= $this->baseUrl(); ?>/html/images/accept.png",
         	  	handler : function(){
           	  	
         	  		task_complete_grid.postSelectedIDs({ 
          	  			url: "<?= $this->baseUrl(); ?>/tasks/mark-incomplete", 
          	  			postParam : "data[]", 
          	  			maskSave: true,
          	  			callback: function(){ filterTasks('',''); }    						
          	  		});
       	  		
         	  	}
         	},
		   	'-',
		  	{
         		text: "Delete",
             	icon: "<?= $this->baseUrl(); ?>/html/images/application_delete.png",
             	handler : function(){

             		Ext.MessageBox.confirm("Confirm", "Are you sure you want to delete these tasks?", function(btn){ 
                    	if ( btn == "yes"){
		               		task_complete_grid.postSelectedIDs({ 
		           	  			url: "<?= $this->baseUrl(); ?>/tasks/delete", 
		           	  			postParam : "data[]", 
		           	  			maskSave: true,
		           	  			callback: function(){ filterTasks('',''); }    						
		           	  		});
                    	}
               		});
              		
             	}
         	},
          	'-',
          	category_complete_combo,
          	{
           		text: "Apply",
               	icon: "<?= $this->baseUrl(); ?>/html/images/add.png",
               	handler : function(){

               		if( category_complete_combo.getValue() != '' ){
               			applyCategory(category_complete_combo.getValue(),task_complete_grid);
               			category_complete_combo.setValue('');
               		}else{
               			Ext.Msg.alert("Error", "Please select a category to apply.");
               		}
                	
               	}
          	},{
           		text: "Remove",
               	icon: "<?= $this->baseUrl(); ?>/html/images/delete.png",
               	handler : function(){

               		if( category_complete_combo.getValue() != '' ){
               			removeCategory(category_complete_combo.getValue(),task_complete_grid);
               			category_complete_combo.setValue('');
               		}else{
               			Ext.Msg.alert("Error", "Please select a category to remove.");
               		}
                	
               	}
          	}                                       
     	],
	bbar: task_complete_pagingbar 	    

});

var task_upcoming_sm = new Ext.grid.CheckboxSelectionModel();

var task_upcoming_cm = new Ext.grid.ColumnModel([
	task_upcoming_sm,
	{ header: "", dataIndex: "ID", width: 25, menuDisabled: true, hideable: false, renderer: formatEditTaskLink },	
	{ header: "Priority", dataIndex: "PRIORITY", width: 50 },
	{ header: "Display Date", dataIndex: "DISPLAY_DATE", width: 80, renderer: Ext.util.Format.dateRenderer("d-M-Y") },
	{ header: "Categories", dataIndex: "CATEGORIES", width: 125, sortable: false },
	{ header: "Project", dataIndex: "PROJECT", width: 200, renderer: formatLoadTaskProjectLink },
	{ id: "upcoming_description", header: "Description", dataIndex: "DESCRIPTION", width: 200 }                                                 
]);
                                                                                                                                                              	
var task_upcoming_store = new Ext.data.Store({ 
	url: "<?= $this->baseUrl(); ?>/tasks/user-tasks/status/upcoming",
	baseParams: task_filter, 
	remoteSort: true, 
	sortInfo: {
		field: 'DISPLAY_DATE',
		direction: 'ASC'
	}, 
	reader: new Ext.data.JsonReader({ totalProperty: "results", root: "data", id: "ID" }, Task), 
	autoLoad: false 
});		

var task_upcoming_pagingbar = new Ext.PagingToolbar({
	pageSize: 50,
	store: task_upcoming_store,
	displayInfo: true,
	displayMsg: "Displaying tasks {0} - {1} of {2}",
	emptyMsg: "No tasks to display"
});

var category_upcoming_combo = new Ext.form.ComboBox({ 
	hideLabel: true, 	 
	width: 200,	 
	store: category_store, 
	valueField: "ID", 
	displayField: "DESCRIPTION", 
	typeAhead: true, 
	mode: "local", 
	triggerAction: "all", 
	emptyText: "select category to apply / remove", 
	selectOnFocus: true, 
	editable: false
});

var task_upcoming_grid = new Ext.ux.EasyEditorGridPanel({
                                                                                                                                                              		
	title: 'Upcoming',		
	store: task_upcoming_store,
	cm: task_upcoming_cm,    	
	autoExpandColumn: "upcoming_description",	   
	stripeRows: true,
	selModel: task_upcoming_sm,
	loadMask: true,
	tbar: [        	
		  	{
        		text: "Delete",
            	icon: "<?= $this->baseUrl(); ?>/html/images/application_delete.png",
            	handler : function(){

            		Ext.MessageBox.confirm("Confirm", "Are you sure you want to delete these tasks?", function(btn){ 
                    	if ( btn == "yes"){
		               		task_upcoming_grid.postSelectedIDs({ 
		           	  			url: "<?= $this->baseUrl(); ?>/tasks/delete", 
		           	  			postParam : "data[]", 
		           	  			maskSave: true,
		           	  			callback: function(){ filterTasks('',''); }    						
		           	  		});
                    	}
               		});
             		
            	}
        	},
          	'-',
          	category_upcoming_combo,
          	{
           		text: "Apply",
               	icon: "<?= $this->baseUrl(); ?>/html/images/add.png",
               	handler : function(){

               		if( category_upcoming_combo.getValue() != '' ){
               			applyCategory(category_upcoming_combo.getValue(),task_upcoming_grid);
               			category_upcoming_combo.setValue('');
               		}else{
               			Ext.Msg.alert("Error", "Please select a category to apply.");
               		}
                	
               	}
          	},{
           		text: "Remove",
               	icon: "<?= $this->baseUrl(); ?>/html/images/delete.png",
               	handler : function(){

               		if( category_upcoming_combo.getValue() != '' ){
               			removeCategory(category_upcoming_combo.getValue(),task_upcoming_grid);
               			category_upcoming_combo.setValue('');
               		}else{
               			Ext.Msg.alert("Error", "Please select a category to remove.");
               		}
                	
               	}
          	}                                       
    	],
	bbar: task_upcoming_pagingbar 	    

});

var task_search_cm = new Ext.grid.ColumnModel([	
	{ header: "", dataIndex: "ID", width: 25, menuDisabled: true, hideable: false, renderer: formatEditTaskLink },	
	{ header: "Priority", dataIndex: "PRIORITY", width: 50 },
	{ header: "Completed", dataIndex: "COMPLETED", width: 80, renderer: Ext.util.Format.dateRenderer("d-M-Y") },
	{ header: "Categories", dataIndex: "CATEGORIES", width: 125, sortable: false },
	{ header: "Project", dataIndex: "PROJECT", width: 200, renderer: formatLoadTaskProjectLink },
	{ id: "search_description", header: "Description", dataIndex: "DESCRIPTION", width: 200 }                                                 
]);
                                                                                                                                                              	
var task_search_store = new Ext.data.Store({ 
	url: "<?= $this->baseUrl(); ?>/tasks/user-tasks/status/search",
	baseParams: task_filter, 
	remoteSort: true, 
	sortInfo: {
		field: 'COMPLETED',
		direction: 'ASC'
	}, 
	reader: new Ext.data.JsonReader({ totalProperty: "results", root: "data", id: "ID" }, Task), 
	autoLoad: false 
});		

var task_search_pagingbar = new Ext.PagingToolbar({
	pageSize: 50,
	store: task_search_store,
	displayInfo: true,
	displayMsg: "Displaying tasks {0} - {1} of {2}",
	emptyMsg: "No tasks to display"
});

var task_search_keyword = new Ext.form.TextField({	
	hideLabel: true, 	 
	width: 300,	 	 
	emptyText: "enter search keywords",
	listeners: {
        specialkey: function(field, e){
            if (e.getKey() == e.ENTER) {
            	searchTasks(task_search_keyword.getValue());	    
            }            
        }
	}
});

var task_search_grid = new Ext.ux.EasyEditorGridPanel({
                                                                                                                                                              		
	title: 'Search',		
	store: task_search_store,
	cm: task_search_cm,    	
	autoExpandColumn: "search_description",	   
	stripeRows: true,
	selModel: new Ext.grid.RowSelectionModel({ singleSelect:true }),
	loadMask: true,
	tbar: [        	
			task_search_keyword,
		  	{
           		text: "Search",
               	icon: "<?= $this->baseUrl(); ?>/html/images/magnifier.png",
               	handler : function(){					               		               		
               		searchTasks(task_search_keyword.getValue());
               	}
          	}                                       
    	],
	bbar: task_search_pagingbar 	    

});

function searchTasks(keyword){
	task_filter.keyword = task_search_keyword.getValue();               	    
	task_search_store.load({ params: { start: 0, limit: 50 } });
}

function applyCategory(cat,grid){
	
	grid.postSelectedIDs({ 
 			url: "<?= $this->baseUrl(); ?>/tasks/apply-category/id/" + cat, 
 			postParam : "data[]", 
 			maskSave: true,
 			callback: function(){ filterTasks('',''); }    						
 	});
 	
}

function removeCategory(cat,grid){
	
	grid.postSelectedIDs({ 
 			url: "<?= $this->baseUrl(); ?>/tasks/remove-category/id/" + cat, 
 			postParam : "data[]", 
 			maskSave: true,
 			callback: function(){ filterTasks('',''); }    						
 	});
 	
}

var task_tabs = new Ext.TabPanel({
	
	activeTab:0,                                                	
	deferredRender: true,
	region: 'center',
	plain: true,
	margins:'5 5 5 0',
				                        
	items:	[                                                
				task_queue_grid,
				task_pending_grid,
				task_complete_grid,
				task_upcoming_grid,
				task_search_grid                                                              	                        
			]	
		                                        
});


/**************************************
 * PROJECT GRID
 *************************************/
var Project = Ext.data.Record.create([
	{name: "ID", type: "string"},	
	{name: "DESCRIPTION", type: "string"},
	{name: "COMMENTS", type: "string"},                        
	{name: "STATUS", type: "string"},
	{name: "TASK_PENDING", type: "float"},
	{name: "TASK_COMPLETE", type: "float"},
	{name: "TASK_TOTAL", type: "float"},
	{name: "COMPLETED", type: "date", dateFormat: "Y-m-d H:i:s"},
	{name: "CATEGORIES", type: "string"}
]);
  
var all_project_store = new Ext.data.Store({ 
	url: "<?= $this->baseUrl(); ?>/projects/userprojects", 
	reader: new Ext.data.JsonReader({ root: "data", id: "ID" }, Project ), 
	autoLoad: true 
});

function formatEditProjectLink(value, metaData, record, rowIndex, colIndex, store){	
	lnk = "javascript:loadProject('"+ value + "');";
    return '<a href="'+ lnk +'" title="edit" style=""><img src="<?= $this->baseUrl() ?>/html/images/application_edit.png" /></a>';	            
}

var project_sm = new Ext.grid.CheckboxSelectionModel();

var project_cm = new Ext.grid.ColumnModel([
	project_sm,
	{ header: "", dataIndex: "ID", width: 30, menuDisabled: true, hideable: false, renderer: formatEditProjectLink },
	{ header: "Status", dataIndex: "STATUS", width: 100 },	
	{ header: "Categories", dataIndex: "CATEGORIES", width: 150 },
	{ id: "project_description", header: "Description", dataIndex: "DESCRIPTION", width: 200, sortable: true },
	{ header: "Pending Tasks", dataIndex: "TASK_PENDING", width: 100 },
	{ header: "Complete Tasks", dataIndex: "TASK_COMPLETE", width: 100 },
	{ header: "Total Tasks", dataIndex: "TASK_TOTAL", width: 100 },
	{ header: "Project Completed", dataIndex: "COMPLETED", width: 100, renderer: Ext.util.Format.dateRenderer("d-M-Y"), sortable: true }                                                 
]);

var project_filter = new Object();
project_filter.status = 'active';
project_filter.category = '';

var project_store = new Ext.data.Store({ 
	url: "<?= $this->baseUrl(); ?>/projects/user-projects-paged",
	baseParams: project_filter, 
	remoteSort: true, 
	sortInfo: {
		field: 'DESCRIPTION',
		direction: 'ASC'
	}, 
	reader: new Ext.data.JsonReader({ totalProperty: "results", root: "data", id: "ID" }, Project), 
	autoLoad: false 
});		

var project_pagingbar = new Ext.PagingToolbar({
	pageSize: 50,
	store: project_store,
	displayInfo: true,
	displayMsg: "Displaying projects {0} - {1} of {2}",
	emptyMsg: "No projects to display"
});

var project_status_filter_store = new Ext.data.SimpleStore({ 
	fields: ["val"], 
	data : [ 
	    		["all"],
	    		["active"], 
	    		["complete"]
	       ] 	     	
});

var project_status_filter_combo = new Ext.form.ComboBox({ 	 
	value: "active",
	width: 80,
	allowBlank: true, 
	store: project_status_filter_store, 
	valueField: "val", 
	displayField: "val", 
	typeAhead: true, 
	mode: "local", 
	triggerAction: "all", 
	emptyText: " ", 
	selectOnFocus: true, 
	editable: false,
	listeners: {
		select: {
           fn: function(combo, value){
				project_filter.status = combo.getValue();
                project_store.load({ params: { start: 0, limit: 50 } });                                                         
           }
        }
     }	 
});

var project_category_filter_combo = new Ext.form.ComboBox({ 	 	 
	width: 200,	 
	store: category_store, 
	valueField: "ID", 
	displayField: "DESCRIPTION", 
	typeAhead: true, 
	mode: "local", 
	triggerAction: "all", 
	emptyText: "", 
	selectOnFocus: true, 
	editable: false,
	listeners: {
		select: {
           fn: function(combo, value){
				project_filter.category = combo.getValue();
                project_store.load({ params: { start: 0, limit: 50 } });                                                         
           }
        }
     }
});


var project_category_apply_remove_combo = new Ext.form.ComboBox({ 
	hideLabel: true, 	 
	width: 200,	 
	store: category_store, 
	valueField: "ID", 
	displayField: "DESCRIPTION", 
	typeAhead: true, 
	mode: "local", 
	triggerAction: "all", 
	emptyText: "select category to apply / remove", 
	selectOnFocus: true, 
	editable: false
});

var project_grid = new Ext.ux.EasyEditorGridPanel({
				
	store: project_store,
	cm: project_cm,    	
	autoExpandColumn: "project_description",	   
	stripeRows: true,
	selModel: project_sm,
	loadMask: true,	
	tbar: 	[				
				{ 
					text: "New Project",		            
					icon: "<?= $this->baseUrl() ?>/html/images/application_cascade.png",
					handler : function(){
						newProject();						   				
					}
				},
		      	'-',
		      	project_category_apply_remove_combo,
		      	{
	           		text: "Apply",
	               	icon: "<?= $this->baseUrl(); ?>/html/images/add.png",
	               	handler : function(){

	               		if( project_category_apply_remove_combo.getValue() != '' ){							
	               			project_grid.postSelectedIDs({ 
	               	 			url: "<?= $this->baseUrl(); ?>/projects/apply-category/id/" + project_category_apply_remove_combo.getValue(), 
	               	 			postParam : "data[]", 
	               	 			maskSave: true,
	               	 			callback: function(){ 
		               	 			project_store.reload(); 
	               	 			}    						
	               	 		});	               			
	               			project_category_apply_remove_combo.setValue('');
	               		}else{
	               			Ext.Msg.alert("Error", "Please select a category to apply.");
	               		}
	                	
	               	}
	          	},{
	           		text: "Remove",
	               	icon: "<?= $this->baseUrl(); ?>/html/images/delete.png",
	               	handler : function(){

	               		if( project_category_apply_remove_combo.getValue() != '' ){
	               			project_grid.postSelectedIDs({ 
	               	 			url: "<?= $this->baseUrl(); ?>/projects/remove-category/id/" + project_category_apply_remove_combo.getValue(), 
	               	 			postParam : "data[]", 
	               	 			maskSave: true,
	               	 			callback: function(){ 
	               	 				project_store.reload();  
		               	 		}    						
	               	 		});
	               			project_category_apply_remove_combo.setValue('');
	               		}else{
	               			Ext.Msg.alert("Error", "Please select a category to remove.");
	               		}
	                	
	               	}
	          	},
				'-',
				{ 
		        	text: "Edit Categories",		            
		            icon: "<?= $this->baseUrl() ?>/html/images/cog.png",
		            handler : function(){
		            	editCategories();
		            }
		      	},
				'-',
				'Filter By Project Status: ',
				project_status_filter_combo,
				'-',
				'Filter By Category: ',
				project_category_filter_combo,
				'-',
				{ 
					text: "Reset Filters",		            
					icon: "<?= $this->baseUrl() ?>/html/images/page_refresh.png",
					handler : function(){
						project_filter.status = 'active';
						project_status_filter_combo.setValue('active');
						project_filter.category = '';
						project_category_filter_combo.setValue('');
		                project_store.load({ params: { start: 0, limit: 50 } }); 											   				
					}
				}
			],    
	bbar: project_pagingbar 	    

});


/**************************************
 * TASK DETAIL WINDOW
 *************************************/
var project_combo = new Ext.form.ComboBox({	
	fieldLabel: "Project", 
	hiddenName: "PROJECT_ID", 
	width: 400,
	allowBlank: true, 
	store: all_project_store, 
	valueField: "ID", 
	displayField: "DESCRIPTION", 
	typeAhead: true, 
	mode: "local", 
	triggerAction: "all", 
	emptyText: " ", 
	selectOnFocus: true, 
	editable: false,
	listeners: {
		select: {
			fn: function(combo,record){
				task_form.getForm().findField('CATEGORIES').setValue(record.get("CATEGORIES"));
			}
		}
	}
});

var priority_store = new Ext.data.Store({ 
	url: "<?= $this->baseUrl(); ?>/projects/priorities", 
	reader: new Ext.data.JsonReader({ root: "data", id: "ID" }, ["ID","DESCRIPTION"] ), 
	autoLoad: true 
});

var priority_combo = new Ext.form.ComboBox({ 
	fieldLabel: "Priority", 
	hiddenName: "PRIORITY_ID",
	value: "2",
	width: 100,
	allowBlank: false, 
	store: priority_store, 
	valueField: "ID", 
	displayField: "DESCRIPTION", 
	typeAhead: true, 
	mode: "local", 
	triggerAction: "all", 
	emptyText: " ", 
	selectOnFocus: true, 
	editable: false 
});

var complete_combo = new Ext.form.ComboBox({ 
	fieldLabel: "Complete", 
	hiddenName: "COMPLETE", 
	value: "no",
	width: 100,
	allowBlank: false, 
	store: ynss, 
	valueField: "key", 
	displayField: "val", 
	typeAhead: true, 
	mode: "local", 
	triggerAction: "all", 
	emptyText: " ", 
	selectOnFocus: true, 
	editable: false 
});

var recur_unit_type_store = new Ext.data.SimpleStore({ 
	fields: ["label", "val"], 
	data : [ 
	    		["days","days"], 
	    		["months","months"], 
	    		["years","years"]
	       ] 	     	
});

var map = new Ext.KeyMap(document, 
		[ 
			{
	 			key: Ext.EventObject.ENTER,
				ctrl:true,
		        shift:true,
				fn: newTasks,
				scope: this
			},{
				key: Ext.EventObject.INSERT,
				ctrl:true,
		        shift:true,
				fn: saveTasks,
				scope: this
			}
		]
);

var task_form = new Ext.form.FormPanel({
	
	id: "task_form",
	labelWidth: 100,
	baseCls: "x-plain",                      
    defaultType: "textfield",
	buttonAlign: "right",
	keys: map,	           	
        
    items: [												
		{ 
			xtype: "textarea",			
			hideLabel: true, 
			name: "DESCRIPTION", 
			width: 575,
			height: 100,
			allowBlank: false
		},
		project_combo,		
		{
            xtype: 'multiselect',
            fieldLabel: 'Categories',
            name: 'CATEGORIES',
            width: 400,
            height: 125,
            style: "background: #FFFFFF;",            
            allowBlank: true,            
            store: category_store,
            displayField: "DESCRIPTION",
            valueField: "ID",
            tbar:[{
                text: 'clear',
                handler: function(){
	                task_form.getForm().findField('CATEGORIES').reset();
	            }
            }]
        },		
		priority_combo,
		{ 
			xtype: "datefield", 
			fieldLabel: "Due Date", 
			name: "DUE_DATE", 
			width: 100,
			allowBlank: true, 
			format: "Y-m-d" 
		},{ 
			xtype: "combo",
			fieldLabel: "Add To Queue",
			hiddenName: "ADD_TO_QUEUE", 	 
			width: 100,	 
			store: ynss,
			value: "1", 
			valueField: "key", 
			displayField: "val", 
			typeAhead: true, 
			mode: "local", 
			triggerAction: "all", 
			emptyText: "", 
			selectOnFocus: true, 
			editable: false
		},{
            xtype: 'fieldset',
            title: 'Recurrence',            
            autoHeight:true,
            labelWidth: 400,                        
            items :[	
						{ 
							xtype: "panel",  
							baseCls: "x-plain",                      
						  	layout:"column",
						  	items:[
						              {   
						                 columnWidth:.85, 
						                 layout: "form",             
										 baseCls: "x-plain",                                        
						                 items: [
						                 			
						                 			{
									                	xtype: 'numberfield',
									                	width: 50,	
								                    	fieldLabel: 'Generate a copy of this task at the specified time from completion',
								                    	name: 'RECUR_UNITS'
								                	}		
						                 		]
						              },{   
						                 columnWidth:.15, 
										 baseCls: "x-plain",                      
						                 layout: "form",                               
						                 items: [
													{
														xtype: 'combo',
														hideLabel: true, 
														hiddenName: "RECUR_UNIT_TYPE",
														value: "days", 			            	
														width: 75,
														allowBlank: true, 
														store: recur_unit_type_store, 
														valueField: "val", 
														displayField: "label", 
														typeAhead: true, 
														mode: "local", 
														triggerAction: "all", 
														emptyText: " ", 
														selectOnFocus: true, 
														editable: false	                    	
													}
						                 		]
						              }
						      	]
						}                                                                                                                                                                                                        	
            		]
        },{ 
			xtype: "hidden",
			name: "ID"
		}
    ],
	
	buttons: [  
       	{ 			
			text: "SAVE", 
			handler: function(){ 
				
				saveTasks();							
				
			} 
		},{ 
			text: "DELETE", 
			handler: function(){ 
				
				Ext.MessageBox.confirm("Confirm", "Are you sure you want to delete this item?", function(btn){ 
                	if ( btn == "yes"){
				 
						Ext.Ajax.request({
		   					url: '<?= $this->baseUrl(); ?>/tasks/delete',
							params: { data: task_form.getForm().findField("ID").getValue() },
		   					success: function(){
								filterTasks('','');
								task_window.hide(); 
							},
		   					failure: function(){
								Ext.Msg.alert("Error", "The task could not be deleted.");
							}   					
						});
						
					}
                });  
			} 
		},{ 
			text: "CLOSE", 
			handler: function(){ 
				task_window.hide(); 
			} 
		}					
	]			
	    	
});


task_window = new Ext.Window({
                                        
    title: "Task Details",                                            	  
    bodyStyle:"padding:5px;",
    closeAction: 'hide',
	modal: true,
	width: 600,
	focus: function(){ this.items.item(0).items.item(0).focus(); },
    items: task_form
    
});


function newTasks(){

	task_window.show();
	task_form.getForm().reset();	

	if( task_filter.project != '' ){
		project_combo.setValue( task_filter.project );
		rec = project_combo.store.getById( task_filter.project );
		task_form.getForm().findField('CATEGORIES').setValue( rec.get("CATEGORIES") );
	}else if( task_filter.category != '' ){
		task_form.getForm().findField('CATEGORIES').setValue( task_filter.category );
	}
	
	task_window.center();
}


function saveTasks(){		
	
	if( task_window.isVisible() ){ 
	
		if ( task_form.getForm().isValid() ){
			
			task_form.getForm().submit({
	        	url: "<?= $this->baseUrl(); ?>/tasks/save", 
	            waitMsg:"Saving Task ...",                                   
	            success: function(){
	        		filterTasks('','');
					task_window.hide(); 
	            },
	            failure: function(){ 
	              	Ext.Msg.alert("Error", "The task could not be saved."); 
	            }
	        });
			 
		}
	
	}	
	
}

function loadTask(id){
		
	task_window.show();
	task_form.getForm().reset();
	task_form.getForm().load({                    
		url:"<?= $this->baseUrl(); ?>/tasks/load",
		params: { id : id },
	    waitMsg:"Loading Task ...",                      
	    failure: function(){
	    	Ext.Msg.alert("Error", "The task could not be loaded."); 
	    },                      
	    success: function(frm,act){                         
	                                  
	    }                      
	});
	task_window.center();          	 		
	
}


function moveInQueue(dir,id){

	Ext.Ajax.request({
		url: '<?= $this->baseUrl(); ?>/tasks/move-task-in-queue',
		params: { id: id, dir: dir },
		success: function(){
			task_queue_store.reload();			
		},
		failure: function(){
			Ext.Msg.alert("Error", "The task could not be moved in the queue.");
		}   					
	});
	
}


/*********************
* PROJECT FORM
********************/

var project_status_store = new Ext.data.SimpleStore({ 
	fields: ["val"], 
	data : [ 	    		
	    		["active"], 
	    		["complete"]
	       ] 	     	
});

var project_form = new Ext.form.FormPanel({
		
	labelWidth: 100,
	baseCls: "x-plain",                      
    defaultType: "textfield",
	buttonAlign: "right",		           
        
    items: [												
				{ 
					xtype: "textfield",			
					fieldLabel: 'Description', 
					name: "DESCRIPTION", 
					width: 400,					
					allowBlank: false
				},{ 
					xtype: "textarea",			
					fieldLabel: 'Comments', 
					name: "COMMENTS", 
					width: 400,
					height: 150,
					allowBlank: true
				},{
		            xtype: 'multiselect',
		            fieldLabel: 'Categories',
		            name: 'CATEGORIES',
		            width: 400,
		            height: 125,
		            style: "background: #FFFFFF;",            
		            allowBlank: true,            
		            store: category_store,
		            displayField: "DESCRIPTION",
		            valueField: "ID",
		            tbar:[{
		                text: 'clear',
		                handler: function(){
			                project_form.getForm().findField('CATEGORIES').reset();
			            }
		            }]
		        },{ 
					xtype: "combo",
					fieldLabel: "Status",
					hiddenName: "STATUS", 	 
					width: 100,	 
					store: project_status_store,
					value: "active", 
					valueField: "val", 
					displayField: "val", 
					typeAhead: true, 
					mode: "local", 
					triggerAction: "all", 
					emptyText: "", 
					selectOnFocus: true, 
					editable: false
				},{ 
					xtype: "combo",
					fieldLabel: "Auto Complete",
					hiddenName: "AUTO_COMPLETE", 	 
					width: 100,	 
					store: ynss,
					value: "1", 
					valueField: "key", 
					displayField: "val", 
					typeAhead: true, 
					mode: "local", 
					triggerAction: "all", 
					emptyText: "", 
					selectOnFocus: true, 
					editable: false
				},{ 
					xtype: "hidden",
					name: "ID"
				}
    ],
	
	buttons: [  
       	{ 			
			text: "SAVE", 
			handler: function(){ 
				
				saveProject();							
				
			} 
		},{ 
			text: "DELETE", 
			handler: function(){ 
				
				Ext.MessageBox.confirm("Confirm", "Are you sure you want to delete this project?", function(btn){ 
                	if ( btn == "yes"){
				 
						Ext.Ajax.request({
		   					url: '<?= $this->baseUrl(); ?>/projects/delete-project',
							params: { id : project_form.getForm().findField("ID").getValue() },
		   					success: function(){
			   					
								project_window.hide();
								all_project_store.reload();
								project_store.reload();

								task_filter_tree.getRootNode().reload(
									function(){
										filterTasks('','');		
									}
								);	
								
							},
		   					failure: function(){
								Ext.Msg.alert("Error", "The project could not be deleted.");
							}   					
						});
						
					}
                });  
			} 
		},{ 
			text: "CLOSE", 
			handler: function(){ 
				project_window.hide(); 
			} 
		}					
	]			
	    	
});


project_window = new Ext.Window({
                                        
    title: "Project Details",                                            	  
    bodyStyle:"padding:5px;",
    closeAction: 'hide',
	modal: true,
	width: 550,
	focus: function(){ this.items.item(0).items.item(0).focus(); },
    items: project_form
    
});


function newProject(){
	project_window.show();
	project_form.getForm().reset();		
	project_window.center();
}


function saveProject(){		
	
	if( project_window.isVisible() ){ 
	
		if ( project_form.getForm().isValid() ){
			
			project_form.getForm().submit({
	        	url: "<?= $this->baseUrl(); ?>/projects/saveproject", 
	            waitMsg:"Saving Project ...",                                   
	            success: function(frm,act){	        		

					project_window.hide();
					all_project_store.reload();
					project_store.reload(); 					

					if( act.result.reload == true ){
						task_filter_tree.getRootNode().reload(
								function(){
									if( project_form.getForm().findField("ID").getValue() == '' && act.result.id != '' ){
										filterTasks('project',act.result.id);
									}else{
										filterTasks('','');
									}									
								}
						);
					}
					
	            },
	            failure: function(){ 
	              	Ext.Msg.alert("Error", "The project could not be saved."); 
	            }
	        });
			 
		}
	
	}	
	
}

function loadProject(id){
		
	project_window.show();
	project_form.getForm().reset();
	project_form.getForm().load({                    
		url:"<?= $this->baseUrl(); ?>/projects/load-project",
		params: { id : id },
	    waitMsg:"Loading Project ...",                      
	    failure: function(){
	    	Ext.Msg.alert("Error", "The project could not be loaded."); 
	    },                      
	    success: function(frm,act){                         
	                                  
	    }                      
	});
	project_window.center();          	 		
	
}


/**************************************
 * EDIT TOPICS WINDOW
 *************************************/

var Topic = Ext.data.Record.create([
    {name: "ID", type: "string"},    
    {name: "DESCRIPTION", type: "string"}               
]);

var topic_store = new Ext.data.Store({ 
	url: "<?= $this->baseUrl(); ?>/notes/get-topics", 
	reader: new Ext.data.JsonReader({ root: "data", id: "ID" }, Topic ), 
	autoLoad: true 
});

var topic_cm = new Ext.grid.ColumnModel([
  { id: "id", header: "ID", dataIndex: "ID", hidden: true },  
  { id: "DESCRIPTION", header: "Description", dataIndex: "DESCRIPTION", width: 200, editor: new Ext.form.TextField({ allowBlank: false }) }         
]);

topic_cm.defaultSortable = true;
    
var topic_grid = new Ext.ux.EasyEditorGridPanel({
		
    store: topic_store,
    cm: topic_cm,    
    clicksToEdit:1,
    autoExpandColumn: "DESCRIPTION",
    frame:true,    
    stripeRows: true,
    selModel: new Ext.grid.RowSelectionModel( {singleSelect:true} ),
    loadMask: true,

    tbar: [
              { 
                  text: "Add",
                  icon: "<?= $this->baseUrl(); ?>/html/images/add.png",
                  handler : function(){
                  		topic_grid.addNewRow({ rec : new Topic({ ID: "", DESCRIPTION: "" }) });
                  }
              },
              {
                  text: "Delete",
                  icon: "<?= $this->baseUrl(); ?>/html/images/delete.png",
                  handler : function(){
						Ext.MessageBox.confirm("Confirm", "Are you sure you want to delete this item?", function(btn){ 
                          	if ( btn == "yes"){
                            	topic_grid.deleteSelectedRows( { url: "<?= $this->baseUrl(); ?>/notes/delete-topic" } );
                          	}
                      	});                                                                                                                                                                                                                                                                                                                                                                 
                  }              
              },
              {
                  text: "Save",
                  icon: "<?= $this->baseUrl(); ?>/html/images/bullet_disk.png",
                  handler : function(){
    					topic_grid.postGrid( { url: "<?= $this->baseUrl(); ?>/notes/save-topic", updatePK : true, maskSave: true });
                  }              
              }
          ]
});

topic_window = new Ext.Window({
                                        
    title: "Edit Topics",                                            
    layout:"fit",
    width:400,
    height:300,
    closeAction:"hide",
    modal: true,
    plain: true,
    bodyStyle:"padding:5px;",
    items: topic_grid
    
});        


/**************************************
 * TOPIC TREE
 *************************************/

var topic_tree_tb = new Ext.Toolbar({  
  items: [
            {  
                text : "Edit Topics",
                icon: "<?= $this->baseUrl(); ?>/html/images/application_edit.png",
                handler: function(){
            		topic_window.show();
                }
            }
  ]
});

var note_search = new Ext.form.TextField({		
    hideLabel: true, 
    name: "keyword",
    emptyText: "enter keywords",
    width: 140
});

var topic_tree_bb = new Ext.Toolbar({  
	  items: [
	            note_search,
	            {
					xtype: "button",
					text: "SEARCH",
					width: 50,
					handler: function(){
						
		            	topic_tree.getRootNode().id = note_search.getValue();
		            	topic_tree.getRootNode().reload();		            				            	
		            			            
	            	}
	            }
	  ]
});

var tree_loader = new Ext.tree.TreeLoader({
    dataUrl: '<?= $this->baseUrl(); ?>/notes/load-topics',            
    preloadChildren: true            
});

var tree_root = new Ext.tree.AsyncTreeNode({
	text: 'Topics',
    id: 'root',    
    expanded: true            
});

var topic_tree = new Ext.tree.TreePanel({
                                
        title: "Topics",
        autoScroll:true,        
        animate:true,        
        containerScroll: true,                                 
        tbar: topic_tree_tb,
        bbar: topic_tree_bb,        
        region: "west",
        split:true,
        width: 200,
        minSize: 200,
        maxSize: 300,
        layout:'fit',
        margins:'5 0 5 5',
        collapsible: true,                
        loader: tree_loader,        
        root: tree_root,        
        rootVisible: true
        
});


/**************************************
 * NOTE FORM
 *************************************/

var note_form = new Ext.form.FormPanel({
    
    baseCls: "x-plain",
    labelWidth: 100,                                                            
    id: "note_form",    
              
    items: [                            
              { 
                  xtype: "textfield", 
                  fieldLabel: "Description", 
                  name: "DATA[DESCRIPTION]", 
                  width: 300, 
                  allowBlank: false 
              },{ 
                  xtype: "combo", 
                  fieldLabel: "Topic", 
                  hiddenName: "DATA[TOPIC_ID]", 
                  width: 300, 
                  allowBlank: false, 
                  store: topic_store, 
                  valueField: "ID", 
                  displayField: "DESCRIPTION", 
                  typeAhead: true, 
                  mode: "local", 
                  triggerAction: "all", 
                  emptyText: " ", 
                  selectOnFocus: true, 
                  editable: false 
              },{ 
                  xtype: "htmleditor", 
                  name: "DATA[CONTENTS]", 
                  height: 320, 
                  width: 625, 
                  hideLabel: true 
              },{ 
                  xtype: "hidden", 
                  name: "DATA[ID]" 
              }
              
            ],
    
    buttons: [  
                {
                    text:"SAVE",
                    handler: function(){
                        if ( note_form.getForm().isValid() ){
                                note_form.getForm().submit({
                                    url:"<?= $this->baseUrl(); ?>/notes/save-note", 
                                    waitMsg:"Saving Note ...",
                                    success: function(frm,act){
                                    	note_form.getForm().findField("DATA[ID]").setValue(act.result.id);                                    	
                                    	topic_tree.getRootNode().reload();
                                    	loadNote(act.result.id);
                                    },
                                    failure: function(){ 
                                        Ext.Msg.alert("Error", "The note could not be saved."); 
                                    }
                                });
                        }
                    }                                  
                },{
                    text: "CLOSE",
                    handler: function(){                        
                        note_window.hide();
                    }
                }
              ]
});

note_window = new Ext.Window({
                                        
    title: "Edit Note",                                            
    layout:"fit",
    width:650,
    height:450,
    closeAction:"hide",    
    bodyStyle:"padding:5px;",
    items: note_form
    
});              

/**************************************
 * NOTE PANEL
 *************************************/

var note_panel = new Ext.Panel({
	
	title: "Note",	                                   
    region: "center",    
    bodyStyle: "padding:5px;",
    autoScroll: true,
    contentEl: "note_panel",
    margins:'5 5 5 0',   
    
    tbar: [
              { 
                  text: "New Note",
                  icon: "<?= $this->baseUrl(); ?>/html/images/add.png",
                  handler : function(){
            	  		note_form.getForm().reset();
                  		note_window.show();
                  }
              }
           ]
    	
});


/**************************************
 * MISC FUNCTIONS
 *************************************/

function loadNote(note_id){
	
	note_panel.load({
		url: "<?= $this->baseUrl(); ?>/notes/view",
		params: {id:note_id},
		text: "Loading ..."
	});
	
}


function editNote(note_id){
	note_window.show();	
	note_form.getForm().load({                    
        url: "<?= $this->baseUrl(); ?>/notes/load-note",
        params: {id:note_id},
        waitMsg:"Loading Note",                      
        failure: function(){ 
            Ext.Msg.alert("Error", "The note could not be loaded.  Please contact an administrator to resolve this issue."); 
        },                      
        success: function(frm,act){                         
            
        }                      
    });                        
}


function deleteNote(note_id){
	Ext.MessageBox.confirm("Confirm", "Are you sure you want to delete this note?", function(btn){ 
		if ( btn == "yes"){
			note_panel.load({
				url: "<?= $this->baseUrl(); ?>/notes/delete",
				params: {id:note_id},
				text: "Deleting ...",				 
        		callback: function(){                         
            		topic_tree.getRootNode().reload();
        		}                      
			});
		}
	});
}


/*********************
* TAB PANEL
********************/
	 	
var tab_panel = new Ext.TabPanel({
	                    	
	activeTab:0,                                                	
	deferredRender: true,
	region: 'center',
	plain: true,
	margins:'5',
				                        
	items:	[   
	     		{
		      		title: "<span style='font-size: 14px;'>Tasks</span>",
		      		layout: "border",		      		
		      		items: [
						task_filter_tree,	
						task_tabs  		
				    ],
				    tbar: 	[
						   		{ 
						        	text: "New Task",		            
						            icon: "<?= $this->baseUrl() ?>/html/images/application_add.png",
						            handler : function(){
						   				newTasks();
						            }
						      	},
						      	'-',
						      	{ 
						        	text: "New Project",		            
						            icon: "<?= $this->baseUrl() ?>/html/images/application_cascade.png",
						            handler : function(){
						            	newProject();
						            }
						      	},
						      	'-',
						      	{ 
						        	text: "Edit Categories",		            
						            icon: "<?= $this->baseUrl() ?>/html/images/cog.png",
						            handler : function(){
						            	editCategories();
						            }
						      	}
							]
	      		},{
		      		title: "<span style='font-size: 14px;'>Projects</span>",
		      		layout: "fit",
		      		style: "padding: 5px; background: #F0F0F0",
		      		items: project_grid		      		
	      		},{
		      		title: "<span style='font-size: 14px;'>Notes</span>",
		      		layout: "border",
			      	items: 	[
								topic_tree,	
								note_panel  		
					   		]	
	      		}	                                                                            	                        
			]
		                                        
});


Ext.onReady(function() {


	/*********************
	* LAYOUT
	********************/
   	var viewport = new Ext.Viewport({
        
        layout:'border',
        style:'background: #DFDFDF;',
        items:	[ 
             		new Ext.BoxComponent({ 
                     	region:'north',
                     	el: 'header',
                     	height: 30
                 	}),             		 
             		tab_panel,             		
             		new Ext.BoxComponent({ 
                     	region:'south',
                     	el: 'footer',
                     	height: 45
                 	})
             	]
             
   	});


   	task_filter_tree.getRootNode().expand(
   		true,
   		false,
   		function(){ 
   	   		filterTasks('',''); 
   		}   		
   	);


   	project_store.load({ params: { start: 0, limit: 50 } });
   	

   	/**************************************
	 * LISTENERS
	 *************************************/		   	   	      	
	task_queue_grid.on("celldblclick", function(){		
		loadTask(task_queue_grid.getSelectedRowId());
	});   				

	task_pending_grid.on("celldblclick", function(){		
		loadTask(task_pending_grid.getSelectedRowId());
	});

	task_complete_grid.on("celldblclick", function(){		
		loadTask(task_complete_grid.getSelectedRowId());
	});

	task_upcoming_grid.on("celldblclick", function(){		
		loadTask(task_upcoming_grid.getSelectedRowId());
	});

	category_window.on('hide', function(){
	
		task_filter_tree.getRootNode().reload(
			function(){
				filterTasks('','');		
			}
		);				
				
	});

	<?php if( isset( $this->user ) ){ ?>
  	
		<?php if( $this->user != false ){ ?>

		var task = {
			run: function(){
				Ext.Ajax.request({
	            	url: "<?= $this->baseUrl(); ?>/user/status",                                
	                success: function(resp){                                    
	
	                 	data = Ext.decode( resp.responseText );
	                    
	                    if( data.success == false ){
	                    	document.location.href="<?= $this->baseUrl(); ?>/user/logout";
	                    }
	                                                                                                                                                             
	                },
	               	failure: function(){
	                         
	                }
	          	});
			},
			interval: 300000
		}
		Ext.TaskMgr.start(task);						
		
		<?php } ?>
		
	<?php } ?>
   	   	   	
});
	
</script>

<div id="note_panel"></div>